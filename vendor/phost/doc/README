PHOST: a UDP/IPv4/Ethernet host emulator on Linux userland
**********************************************************

  Copyright (C) 2009-2013 NEC Corporation

  Copying and distribution of this file, with or without modification,
  are permitted in any medium without royalty provided the copyright
  notice and this notice are preserved.

* Introduction
PHOST emulates a single UDP/IPv4/Ethernet host on Linux userland. Once
PHOST is up, it creates a tap device (tap0 by default but you can specify
any interface name) associted with and allows us to send and receive
any UDP packets from/to the emulated host.

* Installation

  $ tar xzvf phost_revN.tar.gz
  $ cd phost/src
  $ make

* Host to run PHOST

1. Start 'phost' process

  # cd phost/src
  # ./phost -D

The following options are available.

  -D: daemonize (default: NOT daemonize)
  -v: print all log messages on stdout and set log level to the maximum
  -d debug_level: set log level (0-3) (default: 2)
  -i tap_dev: specify tap device name (default: tap0)

Log messages are saved in /var/log/phost.log.[tap_dev]. Multiple phost
instances can be created on a single host by specifying different tap
device names (tap device name is used for specifying a phost instance).

2. Initial setup
You need to configure the emulated host after you start phost process.

  # cd phost/src
  (set host's IP address and MAC address)
  # ./cli set_host_addr --ip_addr 192.168.0.1 --mac_addr 00:00:00:00:00:01
  (set static ARP entries)
  # ./cli add_arp_entry --ip_addr 192.168.0.2 --mac_addr 00:00:00:00:00:02
  # ./cli add_arp_entry --ip_addr 192.168.0.3 --mac_addr 00:00:00:00:00:03
  # ./cli add_arp_entry --ip_addr 192.168.0.4 --mac_addr 00:00:00:00:00:04

Note that destination MAC addresses are not resolved by ARP dynamically
at this moment (phost responds to ARP request but it does not send any
ARP requests). So you need to manually add static ARP entry before you
generate packets from the emulated host.

If you specify your tap device name, you need to add "-i" option to specify
your phost instance like below.

  # ./cli -i my_tap_dev set_host_addr --ip_addr 192.168.0.1 \
  --mac_addr 00:00:00:00:00:01

3. Send packets
You can generate UDP packets from the emulated host as follows.

  # ./cli send_packets --ip_src 192.168.0.1 --ip_dst 192.168.0.2 \
  --tp_src 1024 --tp_dst 1024 --length 22 --pps 1000 --duration 2

Only UDP is implemented as transport layer protocol. "--length" option
specifies the length of UDP payload. Ethernet addresses are retrieved
from ARP table automatically.

You can increment IP address or UDP port as follows.

  (increment both ip_src and ip_dst)
  # ./cli send_packets --ip_src 192.168.0.1 --ip_dst 192.168.0.2 \
  --tp_src 1024 --tp_dst 1024 --length 22 --pps 1000 --duration 2 \
  --inc_ip_src --inc_ip_dst

  (increment both tp_src and tp_dst)
  # ./cli send_packets --ip_src 192.168.0.1 --ip_dst 192.168.0.2 \
  --tp_src 1024 --tp_dst 1024 --length 22 --pps 1000 --duration 2 \
  --inc_tp_src --inc_tp_dst

  (increment ip_src only 3 times - so 4 addresses are generated)
  # ./cli send_packets --ip_src 192.168.0.1 --ip_dst 192.168.0.2 \
  --tp_src 1024 --tp_dst 1024 --length 22 --pps 1000 --duration 2 \
  --inc_ip_src=3

  (increment tp_src only 1023 times - so 1024 ports are generated)
  # ./cli send_packets --ip_src 192.168.0.1 --ip_dst 192.168.0.2 \
  --tp_src 1024 --tp_dst 1024 --length 22 --pps 1000 --duration 2 \
  --inc_tp_src=1023

Instead of specifying duration with "--duration" option, you can specify
the number of packets to be sent by "--n_pkts" as follows.

  (send 1024 packets with 1000 pps)
  # ./cli send_packets --ip_src 192.168.0.1 --ip_dst 192.168.0.2 \
  --tp_src 1024 --tp_dst 1024 --length 22 --pps 1000 --n_pkts 1024 \
  --inc_tp_src=1023

4. Show statistics
By using the following command, you can  retrieve/reset packet counters.
Currently two counters (TX and RX) are implemented.

  (show TX counter)
  # ./cli show_stats --tx
  ip_dst,tp_dst,ip_src,tp_src,n_pkts,n_octets
  192.168.0.3,1024,192.168.0.4,1024,1,50
  (show RX counter)
  # ./cli show_stats --rx
  ip_dst,tp_dst,ip_src,tp_src,n_pkts,n_octets
  192.168.0.4,1024,192.168.0.3,1024,300000,15000000

  (reset TX counter)
  # ./cli reset_stats --tx
  (reset RX counter)
  # ./cli reset_stats --rx

Note that "n_octets" does not include Ethernet header.

5. Receive packets with promiscuous mode
By default, only UDP packets destined for the emulated host are received
(phost checks both destination MAC address and IP address). If you want to
receive other packets too, you should enable "promiscuous mode" as follows.

  (enable promiscuous mode)
  # ./cli enable_promisc

  (disable promiscuous mode)
  # ./cli disable_promisc

* How to run phost with Open vSwitch
Since a tap device is an emulated Ethernet device, you can simply specify
tap device as a port of Open vSwitch as follows.

  [/etc/ovs-vswitchd.conf]
  bridge.br0.port=br0
  bridge.br0.port=tap0
  bridge.br0.port=eth1
  bridge.br0.port=eth2
  bridge.br0.controller=tcp:192.168.0.16
  bridge.br0.datapath-id=000000000001


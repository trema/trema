#!/usr/bin/env ruby
# frozen_string_literal: true

$LOAD_PATH.unshift File.join(__dir__, '..', 'lib')

require 'rubygems'
require 'bundler/setup'

require 'active_support/core_ext/object/try'
require 'drb/drb'
require 'gli'
require 'phut'
require 'pio'
require 'trema'

# OpenFlow controller framework.
module Trema
  Trema.logger = Trema::Logger.new('trema')

  # trema command.
  # rubocop:disable ModuleLength
  module App
    extend GLI::App

    desc 'Displays the current runtime version'
    program_desc 'Trema command-line tool'

    version Trema::VERSION

    desc 'Be verbose'
    switch %i[v verbose], negatable: false

    desc 'Runs a trema application'
    arg_name 'controller'
    # rubocop:disable BlockLength
    command :run do |c|
      c.desc 'Runs as a daemon'
      c.switch %i[d daemonize], negatable: false
      c.desc 'Specifies emulated network configuration'
      c.flag %i[c conf]
      c.desc 'Use OpenFlow1.3'
      c.switch :openflow13, default_value: false

      c.desc 'Overrides the default openflow channel port'
      c.flag %i[p port], default_value: Controller::DEFAULT_TCP_PORT

      c.desc 'Set logging level'
      c.flag %i[l logging_level], default_value: :info

      c.desc 'Location to put pid files'
      c.flag %i[P pid_dir], default_value: Trema::DEFAULT_PID_DIR
      c.desc 'Location to put log files'
      c.flag %i[L log_dir], default_value: Trema::DEFAULT_LOG_DIR
      c.desc 'Location to put socket files'
      c.flag %i[S socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

      c.action do |global_options, options, args|
        Phut.pid_dir = options[:pid_dir]
        Phut.log_dir = options[:log_dir]
        Phut.socket_dir = options[:socket_dir]

        Pio::OpenFlow.version = :OpenFlow13 if options[:openflow13]
        options[:logging_level] = :debug if global_options[:verbose]
        Trema.logger.level = options[:logging_level]
        @command = Trema::Command.new
        @command.run(args, global_options.merge(options))
      end
    end
    # rubocop:enable BlockLength

    desc 'Print all flow entries'
    arg_name 'switch'
    command :dump_flows do |c|
      c.desc 'Location to find socket files'
      c.flag %i[S socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

      c.action do |_global_options, options, args|
        vswitch = Trema.vswitch(options[:socket_dir]).map do |each|
          each.find_by(name: args[0])
        end.compact
        vswitch.each { |each| puts each.dump_flows }
      end
    end

    desc 'Sends UDP packets to destination host'
    command :send_packets do |c|
      c.desc 'host that sends packets'
      c.flag %i[s source]
      c.desc 'host that receives packets'
      c.flag %i[d dest]
      c.desc 'number of packets to send'
      c.flag %i[n npackets], default_value: 1

      c.desc 'Location to put socket files'
      c.flag %i[S socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

      c.action do |_global_options, options, _args|
        raise '--source option is mandatory' if options[:source].nil?
        raise '--dest option is mandatory' if options[:dest].nil?
        dest = Trema.fetch(options.fetch(:dest), options.fetch(:socket_dir))
        Phut::VhostDaemon.
          process(options.fetch(:source), options.fetch(:socket_dir)).
          send_packets(dest, options.fetch(:npackets).to_i)
      end
    end

    desc 'Shows stats of packets'
    arg_name 'host'
    # rubocop:disable BlockLength
    command :show_stats do |c|
      c.desc 'Location to find socket files'
      c.flag %i[S socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

      c.action do |_global_options, options, args|
        help_now!('host is required') if args.empty?

        stats = Phut::VhostDaemon.process(args[0], options[:socket_dir]).stats

        dests = stats[:tx].map { |each| each.destination_ip_address.to_s }.uniq
        txstats = dests.map do |each|
          all = stats[:tx].select { |pkt| pkt.destination_ip_address == each }
          "#{all.first.source_ip_address} -> #{each} = " \
          "#{all.size} packet#{all.size > 1 ? 's' : ''}"
        end
        unless txstats.empty?
          puts 'Packets sent:'
          txstats.each { |each| puts "  #{each}" }
        end

        sources = stats[:rx].map { |each| each.source_ip_address.to_s }.uniq
        rxstats = sources.map do |each|
          all = stats[:rx].select { |pkt| pkt.source_ip_address == each }
          "#{each} -> #{all.first.destination_ip_address} = " \
          "#{all.size} packet#{all.size > 1 ? 's' : ''}"
        end
        unless rxstats.empty?
          puts 'Packets received:'
          rxstats.each { |each| puts "  #{each}" }
        end
      end
    end
    # rubocop:enable BlockLength

    desc 'Reset stats of packets'
    command :reset_stats do |c|
      c.desc 'Location to find socket files'
      c.flag %i[S socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

      c.action do |_global_options, options, _args|
        Trema.vhosts(options[:socket_dir]).each(&:reset_stats)
      end
    end

    desc "Brings a switch's specified port up"
    command :port_up do |c|
      c.desc 'switch name'
      c.flag %i[s switch]
      c.desc 'port'
      c.flag %i[p port]
      c.desc 'Location to put socket files'
      c.flag %i[S socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

      c.action do |_global_options, options, _args|
        raise '--switch option is mandatory' if options[:switch].nil?
        raise '--port option is mandatory' if options[:port].nil?
        Trema.trema_processes(options[:socket_dir]).each do |trema|
          trema.port_up(options[:switch], options[:port].to_i)
        rescue RuntimeError
          next
        end
      end
    end

    desc "Brings a switch's specified port down"
    command :port_down do |c|
      c.desc 'switch name'
      c.flag %i[s switch]
      c.desc 'port'
      c.flag %i[p port]
      c.desc 'Location to put socket files'
      c.flag %i[S socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

      c.action do |_global_options, options, _args|
        raise '--switch option is mandatory' if options[:switch].nil?
        raise '--port option is mandatory' if options[:port].nil?
        Trema.trema_processes(options[:socket_dir]).each do |trema|
          trema.port_down(options[:switch], options[:port].to_i)
        rescue RuntimeError
          next
        end
      end
    end

    desc 'Stops a vswitch or a vhost'
    arg_name 'name'
    command :stop do |c|
      c.desc 'Location to find socket files'
      c.flag %i[S socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

      c.action do |_global_options, options, args|
        help_now! if args.size != 1

        vswitch = Trema.vswitch(options[:socket_dir]).map do |each|
          each.find_by(name: args[0])
        end.compact
        vhost = Trema.vhost(options[:socket_dir]).map do |each|
          each.find_by(name: args[0])
        end.compact

        raise %("#{args[0]}" does not exist) if (vswitch + vhost).empty?
        vswitch.each(&:stop)
        vhost.each(&:kill)
      end
    end

    desc 'Deletes a virtual link'
    arg_name 'endpoint1 endpoint2'
    command :delete_link do |c|
      c.desc 'Location to find socket files'
      c.flag %i[S socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

      c.action do |_global_options, options, args|
        help_now! if args.size != 2

        vlink = Trema.vlink(options[:socket_dir]).map do |each|
          each.find(args)
        end
        vlink.each(&:destroy)
      end
    end

    desc 'Starts the stopped vswitch or vhost again'
    arg_name 'name'
    command :start do |c|
      c.desc 'Location to find socket files'
      c.flag %i[S socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

      c.action do |_global_options, options, args|
        help_now! if args.size != 1

        vswitch = Trema.vswitch(options[:socket_dir]).map do |each|
          each.find_by(name: args[0])
        end.compact
        vhost = Trema.vhost(options[:socket_dir]).map do |each|
          each.find_by(name: args[0])
        end.compact

        raise %("#{args[0]}" does not exist) if (vswitch + vhost).empty?

        vswitch.each { |each| each.run(Controller::DEFAULT_TCP_PORT) }
        vhost.each(&:run)
      end
    end

    desc 'Terminates all trema processes'
    arg_name 'controller_name'
    command :killall do |c|
      c.desc 'Kill all known trema processes'
      c.switch :all, default_value: false, negatable: false
      c.desc 'Location to find socket files'
      c.flag %i[S socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

      c.action do |_global_options, options, args|
        if options[:all]
          Trema.trema_processes(options[:socket_dir]).each do |each|
            each.killall
          rescue DRb::DRbConnError
            true # OK (trema process exitted).
          end
        else
          help_now! if args.size != 1
          begin
            Trema.trema_process(args[0], options[:socket_dir]).killall
          rescue DRb::DRbConnError
            true # OK (trema process exitted).
          end
        end
      end
    end

    # rubocop:disable LineLength
    desc 'Opens a new shell or runs a command in the specified network namespace'
    arg_name 'name [command]'
    command :netns do |c|
      c.action do |_global_options, _options, args|
        command_args = args[1..-1]
        if command_args && !command_args.empty?
          system "sudo ip netns exec #{args[0]} #{command_args.join(' ')}"
        else
          system "sudo ip netns exec #{args[0]} #{ENV['SHELL']}"
        end
      end
    end
    # rubocop:enable LineLength

    default_command :help

    on_error do |exception|
      if exception.class.to_s.match?(/^GLI::/)
        # do not show backtrace
        Trema.logger.error "error: #{exception.message}"
      else
        # show backtrace
        logger = @command.try(:controller).try(:logger) || Trema.logger
        logger.error "#{exception.class}: #{exception.message}"
        exception.backtrace.each { |each| logger.error "\t" + each }
      end
      false
    end

    exit run(ARGV)
  end
  # rubocop:enable ModuleLength
end
